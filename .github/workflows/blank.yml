name: GalaxyKick Service
on:
  workflow_dispatch:
    inputs:
      username:
        description: 'Username to use as subdomain'
        required: true
        type: string

jobs:
  expose:
    name: Run for ${{ inputs.username }}
    runs-on: ubuntu-latest
    timeout-minutes: 60 
    env:
      PORT: 7860
      IMAGE_NAME: bharanidharan/galaxykick
      IMAGE_TAG: v207
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Convert username to lowercase
        run: echo "LOWERCASE_USERNAME=$(echo ${{ inputs.username }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Pull and run Docker container
        run: |
          # Pull only if image doesn't exist locally
          if ! docker image inspect $IMAGE_NAME:$IMAGE_TAG &>/dev/null; then
            echo "Pulling Docker image..."
            docker pull $IMAGE_NAME:$IMAGE_TAG
          else
            echo "Using cached Docker image..."
          fi
          
          docker run -d \
            --name galaxykick \
            -p $PORT:$PORT \
            $IMAGE_NAME:$IMAGE_TAG
            
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install lt
        run: npm install -g localtunnel
        
      - name: Configure network and firewall settings
        run: |
          # Allow all outbound connections (GitHub Actions specific)
          sudo iptables -P OUTPUT ACCEPT
          sudo iptables -F OUTPUT
          
          # Allow specific tunnel server ports
          sudo iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT
          sudo iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT
          sudo iptables -A OUTPUT -p tcp --dport 7153 -j ACCEPT
          sudo iptables -A OUTPUT -p tcp --dport 35729 -j ACCEPT
          
          # Test tunnel server connectivity
          echo "Testing tunnel server connectivity..."
          nc -zv loca.lt 80 2>&1 || echo "Port 80 test failed"
          nc -zv loca.lt 443 2>&1 || echo "Port 443 test failed"
          
      - name: Start smart load balancer on main tunnel
        run: |
          # Wait for Docker container
          echo "Waiting for Docker container..."
          sleep 15
          
          # Start backup tunnels first
          echo "Starting backup tunnels..."
          lt --port $PORT --subdomain ${LOWERCASE_USERNAME}-b1 &
          lt --port $PORT --subdomain ${LOWERCASE_USERNAME}-b2 &
          
          sleep 10
          
          # Create simple proxy that only routes between backup tunnels
          cat > proxy_lb.js << 'EOF'
          const http = require('http');
          const https = require('https');
          
          const backupTunnels = [
            `https://${process.env.USERNAME}-b1.loca.lt`,
            `https://${process.env.USERNAME}-b2.loca.lt`
          ];
          
          let currentTunnel = 0;
          const rateLimited = new Set();
          
          function getNextTunnel() {
            let attempts = 0;
            while (attempts < backupTunnels.length) {
              const tunnel = backupTunnels[currentTunnel];
              currentTunnel = (currentTunnel + 1) % backupTunnels.length;
              
              if (!rateLimited.has(tunnel)) {
                return tunnel;
              }
              attempts++;
            }
            rateLimited.clear();
            return backupTunnels[0];
          }
          
          const server = http.createServer((req, res) => {
            const targetTunnel = getNextTunnel();
            
            const proxyReq = https.request(targetTunnel + req.url, {
              method: req.method,
              headers: req.headers,
              timeout: 8000
            }, (proxyRes) => {
              if (proxyRes.statusCode === 429) {
                rateLimited.add(targetTunnel);
                const nextTunnel = getNextTunnel();
                
                const retryReq = https.request(nextTunnel + req.url, {
                  method: req.method,
                  headers: req.headers
                }, (retryRes) => {
                  res.writeHead(retryRes.statusCode, retryRes.headers);
                  retryRes.pipe(res);
                });
                
                retryReq.on('error', () => {
                  res.writeHead(503, {'Content-Type': 'text/plain'});
                  res.end('All tunnels unavailable');
                });
                
                req.pipe(retryReq);
              } else {
                res.writeHead(proxyRes.statusCode, proxyRes.headers);
                proxyRes.pipe(res);
              }
            });
            
            proxyReq.on('error', () => {
              const nextTunnel = getNextTunnel();
              const retryReq = https.request(nextTunnel + req.url, {
                method: req.method,
                headers: req.headers
              }, (retryRes) => {
                res.writeHead(retryRes.statusCode, retryRes.headers);
                retryRes.pipe(res);
              });
              
              retryReq.on('error', () => {
                res.writeHead(503, {'Content-Type': 'text/plain'});
                res.end('Service unavailable');
              });
              
              req.pipe(retryReq);
            });
            
            req.pipe(proxyReq);
          });
          
          server.listen(8080, () => {
            console.log('Tunnel proxy running on port 8080');
          });
          EOF
          
          # Set environment
          export USERNAME="$LOWERCASE_USERNAME"
          export PORT="$PORT"
          
          # Start proxy load balancer
          node proxy_lb.js &
          
          # Start main tunnel pointing to proxy
          lt --port 8080 --subdomain $LOWERCASE_USERNAME &
          
          echo "Setup complete:"
          echo "Main URL: https://$LOWERCASE_USERNAME.loca.lt (with automatic failover)"
          echo "Backup tunnels (internal use):"
          echo "  - https://${LOWERCASE_USERNAME}-b1.loca.lt"
          echo "  - https://${LOWERCASE_USERNAME}-b2.loca.lt"
          

          
          # Keep alive
          while true; do
            sleep 60
            echo "[$(date)] Smart load balancer active"
          done
