name: GalaxyKick Service
on:
  workflow_dispatch:
    inputs:
      username:
        description: 'Username to use as subdomain'
        required: true
        type: string

jobs:
  expose:
    name: Run for ${{ inputs.username }}
    runs-on: ubuntu-latest
    timeout-minutes: 60 
    env:
      PORT: 7860
      IMAGE_NAME: bharanidharan/galaxykick
      IMAGE_TAG: v208
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Convert username to lowercase
        run: echo "LOWERCASE_USERNAME=$(echo ${{ inputs.username }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Pull and run Docker container
        run: |
          # Pull only if image doesn't exist locally
          if ! docker image inspect $IMAGE_NAME:$IMAGE_TAG &>/dev/null; then
            echo "Pulling Docker image..."
            docker pull $IMAGE_NAME:$IMAGE_TAG
          else
            echo "Using cached Docker image..."
          fi
          
          docker run -d \
            --name galaxykick \
            -p $PORT:$PORT \
            $IMAGE_NAME:$IMAGE_TAG
            
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install lt
        run: npm install -g localtunnel
        
      - name: Configure network and firewall settings
        run: |
          # Allow all outbound connections (GitHub Actions specific)
          sudo iptables -P OUTPUT ACCEPT
          sudo iptables -F OUTPUT
          
          # Allow specific tunnel server ports
          sudo iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT
          sudo iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT
          sudo iptables -A OUTPUT -p tcp --dport 7153 -j ACCEPT
          sudo iptables -A OUTPUT -p tcp --dport 35729 -j ACCEPT
          
          # Test tunnel server connectivity
          echo "Testing tunnel server connectivity..."
          nc -zv loca.lt 80 2>&1 || echo "Port 80 test failed"
          nc -zv loca.lt 443 2>&1 || echo "Port 443 test failed"
          
      - name: Start tunnels with backup support
        run: |
          # Wait for Docker container
          echo "Waiting for Docker container..."
          sleep 15
          
          # Start main tunnel
          echo "Starting main tunnel..."
          lt --port $PORT --subdomain $LOWERCASE_USERNAME &
          
          # Start backup tunnels
          echo "Starting backup tunnels..."
          lt --port $PORT --subdomain ${LOWERCASE_USERNAME}2 &
          lt --port $PORT --subdomain ${LOWERCASE_USERNAME}3 &
          
          sleep 15
          
          echo "Setup complete:"
          echo "Main URL: https://$LOWERCASE_USERNAME.loca.lt"
          echo "Backup URLs (for backend failover):"
          echo "  - https://${LOWERCASE_USERNAME}2.loca.lt"
          echo "  - https://${LOWERCASE_USERNAME}3.loca.lt"
          echo ""
          echo "All tunnels point to Docker service on port $PORT"
          echo "Backend will handle failover automatically"
          

          
          # Keep alive
          while true; do
            sleep 60
            echo "[$(date)] Smart load balancer active"
          done
