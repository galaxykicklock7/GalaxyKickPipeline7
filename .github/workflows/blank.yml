name: GalaxyKick Service
on:
  workflow_dispatch:
    inputs:
      username:
        description: 'Username to use as subdomain'
        required: true
        type: string

jobs:
  expose:
    name: Run for ${{ inputs.username }}
    runs-on: ubuntu-latest
    timeout-minutes: 60 
    env:
      PORT: 7860
      IMAGE_NAME: bharanidharan/galaxykick
      IMAGE_TAG: v208
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Convert username to lowercase
        run: echo "LOWERCASE_USERNAME=$(echo ${{ inputs.username }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Pull and run Docker container
        run: |
          # Pull only if image doesn't exist locally
          if ! docker image inspect $IMAGE_NAME:$IMAGE_TAG &>/dev/null; then
            echo "Pulling Docker image..."
            docker pull $IMAGE_NAME:$IMAGE_TAG
          else
            echo "Using cached Docker image..."
          fi
          
          docker run -d \
            --name galaxykick \
            -p $PORT:$PORT \
            $IMAGE_NAME:$IMAGE_TAG
            
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install lt
        run: npm install -g localtunnel
        
      - name: Configure network and firewall settings
        run: |
          # Allow all outbound connections
          sudo iptables -P OUTPUT ACCEPT
          sudo iptables -F OUTPUT
          
          # Allow full port range for localtunnel (30000-40000)
          sudo iptables -A OUTPUT -p tcp --dport 30000:40000 -j ACCEPT
          sudo iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT
          sudo iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT
          
          # Test connectivity
          echo "Testing tunnel server connectivity..."
          timeout 10 nc -zv localtunnel.me 80 2>&1 || echo "localtunnel.me:80 failed"
          timeout 10 nc -zv loca.lt 80 2>&1 || echo "loca.lt:80 failed"
          
      - name: Start tunnels with backup support
        run: |
          # Wait for Docker container to be running
          echo "Waiting for Docker container to be ready..."
          sleep 30
          
          # Check container status
          if ! docker ps | grep -q galaxykick; then
            echo "Container not running, checking logs:"
            docker logs galaxykick
            exit 1
          fi
          
          # Test local service
          echo "Testing local service..."
          for i in {1..10}; do
            if curl -f http://localhost:$PORT >/dev/null 2>&1; then
              echo "Service is responding!"
              break
            fi
            echo "Attempt $i: Service not ready, waiting..."
            sleep 10
          done
          
          # Final check
          if ! curl -f http://localhost:$PORT >/dev/null 2>&1; then
            echo "Service still not responding after 100s, checking logs:"
            docker logs galaxykick
            echo "Container processes:"
            docker exec galaxykick ps aux || echo "Cannot exec into container"
            exit 1
          fi
          
          # Function to start tunnel with retry
          start_tunnel() {
            local subdomain=$1
            local max_retries=3
            local retry=0
            
            while [ $retry -lt $max_retries ]; do
              echo "Starting tunnel for $subdomain (attempt $((retry+1)))..."
              lt --port $PORT --subdomain $subdomain > /tmp/tunnel_${subdomain}.log 2>&1 &
              local pid=$!
              sleep 15
              
              if kill -0 $pid 2>/dev/null; then
                echo "Tunnel $subdomain started (PID: $pid)"
                # Test tunnel
                sleep 5
                if timeout 10 curl -f https://${subdomain}.loca.lt >/dev/null 2>&1; then
                  echo "Tunnel $subdomain is working!"
                  return 0
                else
                  echo "Tunnel $subdomain not responding, checking logs:"
                  cat /tmp/tunnel_${subdomain}.log
                fi
              else
                echo "Tunnel $subdomain process died, retrying..."
              fi
              retry=$((retry+1))
              sleep 5
            done
            echo "Failed to start tunnel $subdomain after $max_retries attempts"
            return 1
          }
          
          # Start tunnels
          start_tunnel $LOWERCASE_USERNAME
          start_tunnel ${LOWERCASE_USERNAME}2
          start_tunnel ${LOWERCASE_USERNAME}3
          
          echo "Setup complete:"
          echo "URLs: https://$LOWERCASE_USERNAME.loca.lt"
          echo "Backup: https://${LOWERCASE_USERNAME}2.loca.lt, https://${LOWERCASE_USERNAME}3.loca.lt"
          
          # Keep alive
          while true; do
            sleep 60
            echo "[$(date)] Smart load balancer active"
          done
