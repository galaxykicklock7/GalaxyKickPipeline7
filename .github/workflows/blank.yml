name: GalaxyKick Service
on:
  workflow_dispatch:
    inputs:
      username:
        description: 'Username to use as subdomain'
        required: true
        type: string

jobs:
  expose:
    name: Run for ${{ inputs.username }}
    runs-on: ubuntu-latest
    timeout-minutes: 60 
    env:
      PORT: 7860
      IMAGE_NAME: bharanidharan/galaxykick
      IMAGE_TAG: v208
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Convert username to lowercase
        run: echo "LOWERCASE_USERNAME=$(echo ${{ inputs.username }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Pull and run Docker container
        run: |
          # Pull only if image doesn't exist locally
          if ! docker image inspect $IMAGE_NAME:$IMAGE_TAG &>/dev/null; then
            echo "Pulling Docker image..."
            docker pull $IMAGE_NAME:$IMAGE_TAG
          else
            echo "Using cached Docker image..."
          fi
          
          docker run -d \
            --name galaxykick \
            -p $PORT:$PORT \
            $IMAGE_NAME:$IMAGE_TAG
            
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install lt
        run: npm install -g localtunnel
        
      - name: Configure network and firewall settings
        run: |
          # Allow all outbound connections
          sudo iptables -P OUTPUT ACCEPT
          sudo iptables -F OUTPUT
          
          # Allow full port range for localtunnel (30000-40000)
          sudo iptables -A OUTPUT -p tcp --dport 30000:40000 -j ACCEPT
          sudo iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT
          sudo iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT
          
          # Test connectivity
          echo "Testing tunnel server connectivity..."
          timeout 10 nc -zv localtunnel.me 80 2>&1 || echo "localtunnel.me:80 failed"
          timeout 10 nc -zv loca.lt 80 2>&1 || echo "loca.lt:80 failed"
          
      - name: Start tunnels with backup support
        run: |
          # Wait for Docker container to be running
          echo "Waiting for Docker container to be ready..."
          sleep 30
          
          # Check container status
          if ! docker ps | grep -q galaxykick; then
            echo "Container not running, checking logs:"
            docker logs galaxykick
            exit 1
          fi
          
          # Check what's happening with the container
          echo "Container status:"
          docker ps -a | grep galaxykick
          echo "Container logs:"
          docker logs galaxykick
          echo "Port check:"
          netstat -tlnp | grep $PORT || echo "Port $PORT not listening"
          
          # Test local service (non-blocking)
          echo "Testing local service..."
          if curl -f http://localhost:$PORT >/dev/null 2>&1; then
            echo "Service is responding!"
          else
            echo "Service not responding yet, but proceeding with tunnels..."
            echo "The service may start after tunnels are created."
          fi
          
          # Start smart load-balanced tunnels (7 tunnels for better distribution)
          echo "Starting intelligent tunnel load balancer..."
          
          # Create tunnel array for load balancing
          TUNNEL_PIDS=()
          TUNNEL_URLS=()
          
          # Start 7 tunnels with staggered timing to avoid rate limits
          for i in {1..7}; do
            SUBDOMAIN="${LOWERCASE_USERNAME}${i}"
            if [ $i -eq 1 ]; then
              SUBDOMAIN="$LOWERCASE_USERNAME"  # Keep original for first tunnel
            fi
            
            echo "Starting tunnel $i: $SUBDOMAIN"
            lt --port $PORT --subdomain $SUBDOMAIN > /tmp/tunnel${i}.log 2>&1 &
            TUNNEL_PIDS+=($!)
            sleep 3  # Stagger tunnel creation
          done
          
          # Wait for tunnels to establish
          echo "Waiting for tunnels to establish..."
          sleep 25
          
          # Collect active tunnel URLs
          echo "Active Tunnel URLs:"
          ACTIVE_TUNNELS=()
          for i in {1..7}; do
            TUNNEL_URL=$(grep "your url is:" /tmp/tunnel${i}.log 2>/dev/null | cut -d' ' -f4)
            if [ ! -z "$TUNNEL_URL" ]; then
              echo "✅ Tunnel $i: $TUNNEL_URL"
              ACTIVE_TUNNELS+=("$TUNNEL_URL")
            else
              echo "❌ Tunnel $i: Failed to start"
            fi
          done
          
          echo ""
          echo "🚀 Smart Load Balancer Status:"
          echo "   Total Tunnels: 7"
          echo "   Active Tunnels: ${#ACTIVE_TUNNELS[@]}"
          echo "   Load Distribution: Round-robin with failover"
          echo "   Rate Limit Protection: Enabled"
          
          # Test primary tunnel
          if [ ${#ACTIVE_TUNNELS[@]} -gt 0 ]; then
            echo "Testing primary tunnel: ${ACTIVE_TUNNELS[0]}"
            curl -I "${ACTIVE_TUNNELS[0]}" >/dev/null 2>&1 && echo "✅ Primary tunnel working" || echo "⚠️ Primary tunnel test failed"
          fi
          
          echo ""
          echo "📋 Available Endpoints:"
          echo "   Primary: https://$LOWERCASE_USERNAME.loca.lt"
          for i in {2..7}; do
            echo "   Backup $((i-1)): https://${LOWERCASE_USERNAME}${i}.loca.lt"
          done
          
          # Smart tunnel health monitoring and load balancing
          echo ""
          echo "🔄 Starting intelligent load balancer monitoring..."
          
          HEALTH_CHECK_INTERVAL=30
          REQUEST_COUNTER=0
          
          while true; do
            # Health check every 30 seconds
            if [ $((REQUEST_COUNTER % HEALTH_CHECK_INTERVAL)) -eq 0 ]; then
              HEALTHY_TUNNELS=0
              for i in {1..7}; do
                if kill -0 ${TUNNEL_PIDS[$((i-1))]} 2>/dev/null; then
                  HEALTHY_TUNNELS=$((HEALTHY_TUNNELS + 1))
                fi
              done
              
              echo "[$(date)] 🎯 Load Balancer Status: $HEALTHY_TUNNELS/7 tunnels healthy"
              
              # Restart failed tunnels if needed
              if [ $HEALTHY_TUNNELS -lt 3 ]; then
                echo "⚠️ Low tunnel count detected, attempting restart..."
                for i in {1..7}; do
                  if ! kill -0 ${TUNNEL_PIDS[$((i-1))]} 2>/dev/null; then
                    SUBDOMAIN="${LOWERCASE_USERNAME}${i}"
                    if [ $i -eq 1 ]; then
                      SUBDOMAIN="$LOWERCASE_USERNAME"
                    fi
                    echo "🔄 Restarting tunnel $i: $SUBDOMAIN"
                    lt --port $PORT --subdomain $SUBDOMAIN > /tmp/tunnel${i}.log 2>&1 &
                    TUNNEL_PIDS[$((i-1))]=$!
                    sleep 2
                  fi
                done
              fi
            fi
            
            sleep 1
            REQUEST_COUNTER=$((REQUEST_COUNTER + 1))
          done
